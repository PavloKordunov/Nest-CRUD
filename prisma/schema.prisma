generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  name       String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  status     Status    @default(User)
  password   String
  following  Follow[] @relation("Following")
  followers  Follow[] @relation("Follower")

  post       Post[]
  groups     Group[] @relation("GroupOwner")
  membership GroupSubsription[]
  comments   Comment[]
  messageReciev Message[] @relation("MessageReceiver")
  messageSend   Message[] @relation("MessageSender")
}

model Follow {
  id            Int    @id @default(autoincrement())
  followerId    Int
  followingId   Int

  follower      User   @relation("Follower", fields: [followerId], references: [id])
  following     User   @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId]) 
  @@index([followingId])
}

model Group {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  description  String    @db.Text
  ownerId      Int
  createdAt    DateTime  @default(now())

  owner        User      @relation("GroupOwner", fields: [ownerId], references: [id])
  
  posts        Post[]
  members      GroupSubsription[]
}

model GroupSubsription {
  id        Int     @id @default(autoincrement())

  userId    Int
  groupId   Int

  user      User    @relation(fields: [userId], references: [id])
  group     Group   @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
  @@index([userId])  
  @@index([groupId])
}

model Post{
  id            Int     @id @default(autoincrement())
  title         String 
  description   String  @db.Text

  userId        Int
  groupId       Int

  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  group         Group   @relation(fields: [groupId], references: [id])
  comments      Comment[]

  @@index([userId])
  @@index([groupId])
}

model Comment {
  id          Int       @id @default(autoincrement())
  userId      Int
  postId      Int?
  topicId     Int?
  parentId    Int?  
  text        String
  createdAt   DateTime  @default(now())

  user        User     @relation(fields: [userId], references: [id])
  post        Post?    @relation(fields: [postId], references: [id])
  topic       Topic?   @relation(fields: [topicId], references: [id])
  parent      Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies     Comment[] @relation("CommentReplies")

  @@index([postId]) 
  @@index([topicId]) 
  @@index([parentId])
}

model Topic {
  id            Int     @id @default(autoincrement())
  title         String
  description   String  @db.Text

  comments      Comment[] 
}

model Message {
  id          Int @id @default(autoincrement())
  senderId    Int
  receiverId  Int
  content     String
  createdAt   DateTime @default(now())

  sender    User @relation("MessageSender", fields: [senderId], references: [id])
  receiver  User @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@index([senderId]) 
  @@index([receiverId]) 
}

enum Status {
  User
  Admin
}